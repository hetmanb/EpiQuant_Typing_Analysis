geom_point(data = mlst_box[mlst_box$value > mlst_box$upper.limit,], aes(x = variable, y = value, col = variable, shape = variable), size = 3) + # plot the outliers using geom_point
theme(legend.position = "none") + # no legend
scale_colour_manual(values = c("Source" = "#d95f02", "Temporal" = "#4dac26", "Balanced" = "#010101")) +
scale_shape_manual(values = c("Source" = 16, "Temporal" = 17, "Balanced" = 18)) + # circles and triangles and diamonds
labs(y = "Epidemiologic Cluster Cohesion", x = "ECC Emphasis") +
theme(plot.margin = unit(c(.65, .5, 2.4, .5), "cm"))
plot(box_mlst)
### Plot 2:
# Set up the data for plotting individual cluster results
mlst_outdata <- mlst[mlst$Cluster_Size > 3,]
# Dummy negative values for source and temporal outliers
mlst_outdata$source_sig <- 0
mlst_outdata$temp_sig <- 2
mlst_outdata$balanced_sig <- 4
# Change 0 to 1 if outlier source, change 2 to 3 if outlier temporal
outlier_source <- (IQR(mlst_outdata$ECC_80_10_10, na.rm = T) * 1.5) + quantile(mlst_outdata$ECC_80_10_10, na.rm = T)[4]
outlier_temp <- (IQR(mlst_outdata$ECC_10_80_10, na.rm = T) * 1.5) + quantile(mlst_outdata$ECC_10_80_10, na.rm = T)[4]
outlier_balanced <- (IQR(mlst_outdata$ECC_50_30_20, na.rm = T) * 1.5) + quantile(mlst_outdata$ECC_50_30_20, na.rm = T)[4]
mlst_outdata$source_sig[which(mlst_outdata$ECC_80_10_10 > outlier_source)] <- 1
mlst_outdata$temp_sig[which(mlst_outdata$ECC_10_80_10 > outlier_temp)] <- 3
mlst_outdata$balanced_sig[which(mlst_outdata$ECC_50_30_20 > outlier_balanced)] <- 5
# Plot the source and temporal ECC with the identified "outliers" as orange and green shapes instead of grey:
p_mlst <- ggplot(mlst_outdata, aes(x = MLST_ST, y = ECC_80_10_10, fill = as.character(source_sig))) + fte_theme() +
geom_point(size = 3, shape = 21) + theme(axis.text.x  = element_text(angle=90, vjust = 0.5)) +
geom_point(size = 3, shape = 24, aes(x = MLST_ST, y = ECC_10_80_10, fill = as.character(temp_sig))) +
geom_point(size = 3, shape = 23, aes(x = MLST_ST, y = ECC_50_30_20, fill = as.character(balanced_sig))) +
labs(y = "", title = '', x = 'MLST ST') + theme(legend.position = "none") +
scale_y_continuous(limit = c(0, 1)) + scale_fill_manual(values = c("0" = "grey50","1" = "#d95f02", "2" = "grey90", "3" = "#4dac26", "4" = "grey95", "5" = "#010101"))
# Combine both plots into a single Figure:
mlst_multiplot <- grid.arrange(box_mlst, p_mlst, ncol = 2, widths = c(5, 15))
# load our table
epi_subtype_match <- suppressMessages(read_tsv("can654.epi(50_30_20).subtype.matching.txt"))
# save the non redundant data (i.e. no "same-same" isolate name matches)
mydata <- as.data.frame(epi_subtype_match)
mydata_nr <- mydata[-which(mydata[,1]==mydata[,2]),]
# calculate the average ∆E for isolates in the same clustersfor each method
paste0("Mean (1-∆E) for pairs of isolates in the same CGF Clusters = ",
round(1 - mean(mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2), "value"]), 4),
", MLST = ",
round(1 - mean(mydata_nr[which(mydata_nr$MLST1 == mydata_nr$MLST2), "value"]), 4),
", CC = ",
round(1 - mean(mydata_nr[which(mydata_nr$CC1 == mydata_nr$CC2), "value"]), 4)
)
# for isolates NOT in the same clusters for each method
paste0("Mean (1-∆E) for pairs of isolates NOT in the same CGF Clusters = ",
round(1 - mean(mydata_nr[which(mydata_nr$CGF1 != mydata_nr$CGF2), "value"]), 4),
", MLST = ",
round(1 - mean(mydata_nr[which(mydata_nr$MLST1 != mydata_nr$MLST2), "value"]), 4),
", CC = ",
round(1 - mean(mydata_nr[which(mydata_nr$CC1 != mydata_nr$CC2), "value"]), 4)
)
# and finally for all isolates regardless of clustering
paste0("Average PW (1-∆E) for the entire dataset = ",
round(1 - mean(mydata_nr[, "value"]), 4)
)
# Avg ∆E for each cluster:
n <- 0
CC_Cluster.data <- list()
for(i in unique(mydata_nr$CC1)){
n <- n+1
x <- mydata_nr$value[(mydata_nr$CC1 == i) & (mydata_nr$CC2 == i)]
CC_Cluster.data$ClusterName[n] <- paste0("CC-",i)
CC_Cluster.data$MeanESym[n] <- 1-mean(x)
CC_Cluster.data$Length[n] <- length(x)
}
n <- 0
MLST_Cluster.data <- list()
for(i in unique(mydata_nr$MLST1)){
n <- n+1
x <- mydata_nr$value[(mydata_nr$MLST1 == i) & (mydata_nr$MLST2 == i)]
MLST_Cluster.data$ClusterName[n] <- paste0("ST-",i)
MLST_Cluster.data$MeanESym[n] <- 1-mean(x)
MLST_Cluster.data$Length[n] <- length(x)
}
n <- 0
CGF_Cluster.data <- list()
for(i in unique(mydata_nr$CGF1)){
n <- n+1
x <- mydata_nr$value[(mydata_nr$CGF1 == i) & (mydata_nr$CGF2 == i)]
CGF_Cluster.data$ClusterName[n] <- paste0("CGF-",i)
CGF_Cluster.data$MeanESym[n] <- 1-mean(x)
CGF_Cluster.data$Length[n] <- length(x)
}
usePackage<-function(p){
# load a package if installed, else load after installation.
# Args:
#   p: package name in quotes
if (!is.element(p, installed.packages()[,1])){
print(paste('Package:',p,'Not found, Installing Now...'))
install.packages(p, dep = TRUE, repos = "http://cran.us.r-project.org")}
suppressMessages(require(p, character.only = TRUE))
print(paste0(p, " loaded."))
}
usePackage("xlsx")
usePackage("reshape2")
usePackage("plyr")
usePackage("grid")
usePackage("gridExtra")
usePackage("ggplot2")
usePackage("RColorBrewer")
usePackage("gplots")
usePackage("readr")
source("helpers/epi-helper.R")
source_pw <- read.table("Pairwise_Source.txt", header = T, sep = '\t')
strain_data <- read.table("Can654_straindata.txt", header = T, sep = '\t')
# Coefficients for source, temporal and geospatial components of the EpiQuant Model: combination of these should add to 1.0
sigma <- 0.5 #source
tau <- 0.3 #temporal
gamma <- 0.2 #geo
epi.table <- EpiTable(strain_data, source_pw, geog_calc(strain_data), temp_calc(strain_data), sigma, tau, gamma)
epi.matrix <- EpiMatrix(epi.table)
EpiHeatmap_pdf(epi.matrix)
typing.data <- read.table("Can654_typingdata_NA.txt", header = T, sep = '\t', row.names = 1, check.names = F)
head(typing.data)
source("helpers/ECC-helper.R")
epi_cohesion_calc(typing.data, epi.matrix)
# Lets go ahead and save this to an excel file:
outfile.name <- "ECC_Results(50.30.20).xlsx"
for(i in 1:length(cut_details)){
write.xlsx(cut_details[[i]], outfile.name, append = T, sheetName = colnames(typing.data)[i], col.names = T, row.names = F, showNA = T)
}
source("helpers/ECC-helper.R")
epi_cohesion_calc(typing.data, epi.matrix)
# Lets go ahead and save this to an excel file:
outfile.name <- "ECC_Results(50.30.20).xlsx"
for(i in 1:length(cut_details)){
write.xlsx(cut_details[[i]], outfile.name, append = T, sheetName = colnames(typing.data)[i], col.names = T, row.names = F, showNA = T)
}
head(cut_details$CGF)
source("helpers/plot_theme.R")
df2 <- read.table("~/Dropbox/0 - Publications_bh/2016_03 EpiQuant Manuscript/EpiQuant_Analysis_2/Can654/cgf_source_vs_temp/ECC_med_results(balanced)_NA.txt", sep = '\t', header = T)
palette <- brewer.pal(8, "Dark2")
bubbleplot <- ggplot(df2[df2$CC_Cluster.size > 18,], aes(x = CC_Cluster.size, y = CC_IEC, size = CC_Cluster.size)) +
geom_point(fill = palette[5], pch = 21, colour = "black") +
geom_point(colour = "black", pch = 21, data = df2[df2$CC_Cluster.size > 18,], aes(x = MLST_Cluster.size, y = MLST_IEC, size = MLST_Cluster.size),fill = palette[3]) +
geom_point(colour = "black", pch = 21, data = df2[df2$CC_Cluster.size > 18,], aes(x = CGF_Cluster.size, y = CGF_IEC, size = CGF_Cluster.size), fill = palette[2]) +
scale_size(range = c(1, 20)) +  facet_wrap(~CC_ST) + plot_theme() + xlab("(Log10) Cluster Size") + ylab("Epidemiologic Cluster Cohesion") +
theme(legend.position = 'right') + scale_x_continuous(trans = "log10")
plot(bubbleplot)
cgf <- read.table("CGF_ECC_data(Source_Temp_Balanced).txt", header = T, sep = '\t')
head(cgf) # Have a look at what our data looks like
### Boxplot of the total distribution of source vs temporal favoured ECC:
# Grab the CGF data from the ECC analysis data of the different typing systems
box_data <- cgf[cgf$Cluster_size > 3 , c(1, 3, 4, 5)]
# Convert it to long format
cgf_box <- melt(box_data, id.vars = "CGF_Subtype")
# Rename the variables to make more sense
cgf_box$variable <- gsub("ECC_80_10_10", "Source", cgf_box$variable)
cgf_box$variable <- gsub("ECC_10_80_10", "Temporal", cgf_box$variable)
cgf_box$variable <- gsub("ECC_50_30_20", "Balanced", cgf_box$variable)
# Calculate the Quartiles to be able to identify the outlier clusters
cgf_box <- ddply(cgf_box, .(variable), mutate, Q1=quantile(value, 1/4),
Q3=quantile(value, 3/4), IQR=Q3-Q1, upper.limit=Q3+1.5*IQR, lower.limit=Q1-1.5*IQR)
# Plot the boxplot data using ggplot
box_cgf <- ggplot(cgf_box, aes(x = variable, y = value, fill = variable)) + plot_theme() +
geom_boxplot(outlier.colour = NULL, outlier.size = 1, show.legend = F, varwidth = T) + # we'll fill in the outlier colors manually
scale_fill_manual(values = c("Source" = "grey50", "Temporal" = "grey90", "Balanced" = "grey95")) + # color the boxes
geom_point(data = cgf_box[cgf_box$value > cgf_box$upper.limit,], aes(x = variable, y = value, col = variable, shape = variable), size = 3) + # plot the outliers using geom_point
theme(legend.position = "none") + # no legend
scale_colour_manual(values = c("Source" = "#d95f02", "Temporal" = "#4dac26", "Balanced" = "#010101")) +
scale_shape_manual(values = c("Source" = 16, "Temporal" = 17, "Balanced" = 18)) + # circles and triangles and diamonds
labs(y = "Epidemiologic Cluster Cohesion", x = "ECC Emphasis") +
theme(plot.margin = unit(c(.65, .5, 2.4, .5), "cm"))
plot(box_cgf)
### Plot 2:
# Set up the data for plotting individual cluster results
cgf_outdata <- cgf[cgf$Cluster_size > 3,]
# Dummy negative values for source and temporal outliers
cgf_outdata$source_sig <- 0
cgf_outdata$temp_sig <- 2
cgf_outdata$balanced_sig <- 4
# Change 0 to 1 if outlier source, change 2 to 3 if outlier temporal
outlier_source <- (IQR(cgf_outdata$ECC_80_10_10, na.rm = T) * 1.5) + quantile(cgf_outdata$ECC_80_10_10, na.rm = T)[4]
outlier_temp <- (IQR(cgf_outdata$ECC_10_80_10, na.rm = T) * 1.5) + quantile(cgf_outdata$ECC_10_80_10, na.rm = T)[4]
outlier_balanced <- (IQR(cgf_outdata$ECC_50_30_20, na.rm = T) * 1.5) + quantile(cgf_outdata$ECC_50_30_20, na.rm = T)[4]
cgf_outdata$source_sig[which(cgf_outdata$ECC_80_10_10 > outlier_source)] <- 1
cgf_outdata$temp_sig[which(cgf_outdata$ECC_10_80_10 > outlier_temp)] <- 3
cgf_outdata$balanced_sig[which(cgf_outdata$ECC_50_30_20 > outlier_balanced)] <- 5
# Plot the source and temporal ECC with the identified "outliers" as orange and green shapes instead of grey:
p_cgf <- ggplot(cgf_outdata, aes(x = CGF_Subtype, y = ECC_80_10_10, fill = as.character(source_sig))) + fte_theme() +
geom_point(size = 3, shape = 21) + theme(axis.text.x  = element_text(angle=90, vjust = 0.5)) +
geom_point(size = 3, shape = 24, aes(x = CGF_Subtype, y = ECC_10_80_10, fill = as.character(temp_sig))) +
geom_point(size = 3, shape = 23, aes(x = CGF_Subtype, y = ECC_50_30_20, fill = as.character(balanced_sig))) +
labs(y = "", title = '', x = 'CGF Subtype') + theme(legend.position = "none") +
scale_y_continuous(limit = c(0, 1)) + scale_fill_manual(values = c("0" = "grey50","1" = "#d95f02", "2" = "grey90", "3" = "#4dac26", "4" = "grey95", "5" = "#010101"))
### Boxplot of the total distribution of source vs temporal favoured ECC:
# Grab the CGF data from the ECC analysis data of the different typing systems
box_data <- cgf[cgf$Cluster_size > 3 , c(1, 3, 4, 5)]
# Convert it to long format
cgf_box <- melt(box_data, id.vars = "CGF_Subtype")
# Rename the variables to make more sense
cgf_box$variable <- gsub("ECC_80_10_10", "Source", cgf_box$variable)
cgf_box$variable <- gsub("ECC_10_80_10", "Temporal", cgf_box$variable)
cgf_box$variable <- gsub("ECC_50_30_20", "Balanced", cgf_box$variable)
# Calculate the Quartiles to be able to identify the outlier clusters
cgf_box <- ddply(cgf_box, .(variable), mutate, Q1=quantile(value, 1/4),
Q3=quantile(value, 3/4), IQR=Q3-Q1, upper.limit=Q3+1.5*IQR, lower.limit=Q1-1.5*IQR)
# Plot the boxplot data using ggplot
box_cgf <- ggplot(cgf_box, aes(x = variable, y = value, fill = variable)) + plot_theme() +
geom_boxplot(outlier.colour = NULL, outlier.size = 1, show.legend = F, varwidth = T) + # we'll fill in the outlier colors manually
scale_fill_manual(values = c("Source" = "grey50", "Temporal" = "grey90", "Balanced" = "grey95")) + # color the boxes
geom_point(data = cgf_box[cgf_box$value > cgf_box$upper.limit,], aes(x = variable, y = value, col = variable, shape = variable), size = 3) + # plot the outliers using geom_point
theme(legend.position = "none") + # no legend
scale_colour_manual(values = c("Source" = "#d95f02", "Temporal" = "#4dac26", "Balanced" = "#010101")) +
scale_shape_manual(values = c("Source" = 16, "Temporal" = 17, "Balanced" = 18)) + # circles and triangles and diamonds
labs(y = "Epidemiologic Cluster Cohesion", x = "ECC Emphasis") +
theme(plot.margin = unit(c(.65, .5, 2.4, .5), "cm"))
plot(box_cgf)
### Plot 2:
# Set up the data for plotting individual cluster results
cgf_outdata <- cgf[cgf$Cluster_size > 3,]
# Dummy negative values for source and temporal outliers
cgf_outdata$source_sig <- 0
cgf_outdata$temp_sig <- 2
cgf_outdata$balanced_sig <- 4
# Change 0 to 1 if outlier source, change 2 to 3 if outlier temporal
outlier_source <- (IQR(cgf_outdata$ECC_80_10_10, na.rm = T) * 1.5) + quantile(cgf_outdata$ECC_80_10_10, na.rm = T)[4]
outlier_temp <- (IQR(cgf_outdata$ECC_10_80_10, na.rm = T) * 1.5) + quantile(cgf_outdata$ECC_10_80_10, na.rm = T)[4]
outlier_balanced <- (IQR(cgf_outdata$ECC_50_30_20, na.rm = T) * 1.5) + quantile(cgf_outdata$ECC_50_30_20, na.rm = T)[4]
cgf_outdata$source_sig[which(cgf_outdata$ECC_80_10_10 > outlier_source)] <- 1
cgf_outdata$temp_sig[which(cgf_outdata$ECC_10_80_10 > outlier_temp)] <- 3
cgf_outdata$balanced_sig[which(cgf_outdata$ECC_50_30_20 > outlier_balanced)] <- 5
# Plot the source and temporal ECC with the identified "outliers" as orange and green shapes instead of grey:
p_cgf <- ggplot(cgf_outdata, aes(x = CGF_Subtype, y = ECC_80_10_10, fill = as.character(source_sig))) + plot_theme() +
geom_point(size = 3, shape = 21) + theme(axis.text.x  = element_text(angle=90, vjust = 0.5)) +
geom_point(size = 3, shape = 24, aes(x = CGF_Subtype, y = ECC_10_80_10, fill = as.character(temp_sig))) +
geom_point(size = 3, shape = 23, aes(x = CGF_Subtype, y = ECC_50_30_20, fill = as.character(balanced_sig))) +
labs(y = "", title = '', x = 'CGF Subtype') + theme(legend.position = "none") +
scale_y_continuous(limit = c(0, 1)) + scale_fill_manual(values = c("0" = "grey50","1" = "#d95f02", "2" = "grey90", "3" = "#4dac26", "4" = "grey95", "5" = "#010101"))
# Combine both plots into a single Figure:
cgf_multiplot <- grid.arrange(box_cgf, p_cgf, ncol = 2, widths = c(5, 15))
# cgf <- read.table("~/Desktop/cgf_sourcevstemp.txt", header = T, sep = '\t')
mlst <- read.table("MLST_ECC_data(Source_Temp_Balanced).txt", header = T, sep = '\t')
head(mlst) # Have a look at what our data looks like
### Boxplot of the total distribution of source vs temporal favoured ECC:
# Grab the CGF data from the ECC analysis data of the different typing systems
box_data <- mlst[mlst$Cluster_Size > 3 , c(1, 3, 4, 5)]
# Convert it to long format
mlst_box <- melt(box_data, id.vars = "MLST_ST")
# Rename the variables to make more sense
mlst_box$variable <- gsub("ECC_80_10_10", "Source", mlst_box$variable)
mlst_box$variable <- gsub("ECC_10_80_10", "Temporal", mlst_box$variable)
mlst_box$variable <- gsub("ECC_50_30_20", "Balanced", mlst_box$variable)
# Calculate the Quartiles to be able to identify the outlier clusters
mlst_box <- ddply(mlst_box, .(variable), mutate, Q1=quantile(value, 1/4),
Q3=quantile(value, 3/4), IQR=Q3-Q1, upper.limit=Q3+1.5*IQR, lower.limit=Q1-1.5*IQR)
# Plot the boxplot data using ggplot
box_mlst <- ggplot(mlst_box, aes(x = variable, y = value, fill = variable)) + fte_theme() +
geom_boxplot(outlier.colour = NULL, outlier.size = 1, show.legend = F, varwidth = T) + # we'll fill in the outlier colors manually
scale_fill_manual(values = c("Source" = "grey50", "Temporal" = "grey90", "Balanced" = "grey95")) + # color the boxes
geom_point(data = mlst_box[mlst_box$value > mlst_box$upper.limit,], aes(x = variable, y = value, col = variable, shape = variable), size = 3) + # plot the outliers using geom_point
theme(legend.position = "none") + # no legend
scale_colour_manual(values = c("Source" = "#d95f02", "Temporal" = "#4dac26", "Balanced" = "#010101")) +
scale_shape_manual(values = c("Source" = 16, "Temporal" = 17, "Balanced" = 18)) + # circles and triangles and diamonds
labs(y = "Epidemiologic Cluster Cohesion", x = "ECC Emphasis") +
theme(plot.margin = unit(c(.65, .5, 2.4, .5), "cm"))
### Boxplot of the total distribution of source vs temporal favoured ECC:
# Grab the CGF data from the ECC analysis data of the different typing systems
box_data <- mlst[mlst$Cluster_Size > 3 , c(1, 3, 4, 5)]
# Convert it to long format
mlst_box <- melt(box_data, id.vars = "MLST_ST")
# Rename the variables to make more sense
mlst_box$variable <- gsub("ECC_80_10_10", "Source", mlst_box$variable)
mlst_box$variable <- gsub("ECC_10_80_10", "Temporal", mlst_box$variable)
mlst_box$variable <- gsub("ECC_50_30_20", "Balanced", mlst_box$variable)
# Calculate the Quartiles to be able to identify the outlier clusters
mlst_box <- ddply(mlst_box, .(variable), mutate, Q1=quantile(value, 1/4),
Q3=quantile(value, 3/4), IQR=Q3-Q1, upper.limit=Q3+1.5*IQR, lower.limit=Q1-1.5*IQR)
# Plot the boxplot data using ggplot
box_mlst <- ggplot(mlst_box, aes(x = variable, y = value, fill = variable)) + plot_theme() +
geom_boxplot(outlier.colour = NULL, outlier.size = 1, show.legend = F, varwidth = T) + # we'll fill in the outlier colors manually
scale_fill_manual(values = c("Source" = "grey50", "Temporal" = "grey90", "Balanced" = "grey95")) + # color the boxes
geom_point(data = mlst_box[mlst_box$value > mlst_box$upper.limit,], aes(x = variable, y = value, col = variable, shape = variable), size = 3) + # plot the outliers using geom_point
theme(legend.position = "none") + # no legend
scale_colour_manual(values = c("Source" = "#d95f02", "Temporal" = "#4dac26", "Balanced" = "#010101")) +
scale_shape_manual(values = c("Source" = 16, "Temporal" = 17, "Balanced" = 18)) + # circles and triangles and diamonds
labs(y = "Epidemiologic Cluster Cohesion", x = "ECC Emphasis") +
theme(plot.margin = unit(c(.65, .5, 2.4, .5), "cm"))
plot(box_mlst)
### Plot 2:
# Set up the data for plotting individual cluster results
mlst_outdata <- mlst[mlst$Cluster_Size > 3,]
# Dummy negative values for source and temporal outliers
mlst_outdata$source_sig <- 0
mlst_outdata$temp_sig <- 2
mlst_outdata$balanced_sig <- 4
# Change 0 to 1 if outlier source, change 2 to 3 if outlier temporal
outlier_source <- (IQR(mlst_outdata$ECC_80_10_10, na.rm = T) * 1.5) + quantile(mlst_outdata$ECC_80_10_10, na.rm = T)[4]
outlier_temp <- (IQR(mlst_outdata$ECC_10_80_10, na.rm = T) * 1.5) + quantile(mlst_outdata$ECC_10_80_10, na.rm = T)[4]
outlier_balanced <- (IQR(mlst_outdata$ECC_50_30_20, na.rm = T) * 1.5) + quantile(mlst_outdata$ECC_50_30_20, na.rm = T)[4]
mlst_outdata$source_sig[which(mlst_outdata$ECC_80_10_10 > outlier_source)] <- 1
mlst_outdata$temp_sig[which(mlst_outdata$ECC_10_80_10 > outlier_temp)] <- 3
mlst_outdata$balanced_sig[which(mlst_outdata$ECC_50_30_20 > outlier_balanced)] <- 5
# Plot the source and temporal ECC with the identified "outliers" as orange and green shapes instead of grey:
p_mlst <- ggplot(mlst_outdata, aes(x = MLST_ST, y = ECC_80_10_10, fill = as.character(source_sig))) + fte_theme() +
geom_point(size = 3, shape = 21) + theme(axis.text.x  = element_text(angle=90, vjust = 0.5)) +
geom_point(size = 3, shape = 24, aes(x = MLST_ST, y = ECC_10_80_10, fill = as.character(temp_sig))) +
geom_point(size = 3, shape = 23, aes(x = MLST_ST, y = ECC_50_30_20, fill = as.character(balanced_sig))) +
labs(y = "", title = '', x = 'MLST ST') + theme(legend.position = "none") +
scale_y_continuous(limit = c(0, 1)) + scale_fill_manual(values = c("0" = "grey50","1" = "#d95f02", "2" = "grey90", "3" = "#4dac26", "4" = "grey95", "5" = "#010101"))
### Boxplot of the total distribution of source vs temporal favoured ECC:
# Grab the CGF data from the ECC analysis data of the different typing systems
box_data <- mlst[mlst$Cluster_Size > 3 , c(1, 3, 4, 5)]
# Convert it to long format
mlst_box <- melt(box_data, id.vars = "MLST_ST")
# Rename the variables to make more sense
mlst_box$variable <- gsub("ECC_80_10_10", "Source", mlst_box$variable)
mlst_box$variable <- gsub("ECC_10_80_10", "Temporal", mlst_box$variable)
mlst_box$variable <- gsub("ECC_50_30_20", "Balanced", mlst_box$variable)
# Calculate the Quartiles to be able to identify the outlier clusters
mlst_box <- ddply(mlst_box, .(variable), mutate, Q1=quantile(value, 1/4),
Q3=quantile(value, 3/4), IQR=Q3-Q1, upper.limit=Q3+1.5*IQR, lower.limit=Q1-1.5*IQR)
# Plot the boxplot data using ggplot
box_mlst <- ggplot(mlst_box, aes(x = variable, y = value, fill = variable)) + plot_theme() +
geom_boxplot(outlier.colour = NULL, outlier.size = 1, show.legend = F, varwidth = T) + # we'll fill in the outlier colors manually
scale_fill_manual(values = c("Source" = "grey50", "Temporal" = "grey90", "Balanced" = "grey95")) + # color the boxes
geom_point(data = mlst_box[mlst_box$value > mlst_box$upper.limit,], aes(x = variable, y = value, col = variable, shape = variable), size = 3) + # plot the outliers using geom_point
theme(legend.position = "none") + # no legend
scale_colour_manual(values = c("Source" = "#d95f02", "Temporal" = "#4dac26", "Balanced" = "#010101")) +
scale_shape_manual(values = c("Source" = 16, "Temporal" = 17, "Balanced" = 18)) + # circles and triangles and diamonds
labs(y = "Epidemiologic Cluster Cohesion", x = "ECC Emphasis") +
theme(plot.margin = unit(c(.65, .5, 2.4, .5), "cm"))
plot(box_mlst)
### Plot 2:
# Set up the data for plotting individual cluster results
mlst_outdata <- mlst[mlst$Cluster_Size > 3,]
# Dummy negative values for source and temporal outliers
mlst_outdata$source_sig <- 0
mlst_outdata$temp_sig <- 2
mlst_outdata$balanced_sig <- 4
# Change 0 to 1 if outlier source, change 2 to 3 if outlier temporal
outlier_source <- (IQR(mlst_outdata$ECC_80_10_10, na.rm = T) * 1.5) + quantile(mlst_outdata$ECC_80_10_10, na.rm = T)[4]
outlier_temp <- (IQR(mlst_outdata$ECC_10_80_10, na.rm = T) * 1.5) + quantile(mlst_outdata$ECC_10_80_10, na.rm = T)[4]
outlier_balanced <- (IQR(mlst_outdata$ECC_50_30_20, na.rm = T) * 1.5) + quantile(mlst_outdata$ECC_50_30_20, na.rm = T)[4]
mlst_outdata$source_sig[which(mlst_outdata$ECC_80_10_10 > outlier_source)] <- 1
mlst_outdata$temp_sig[which(mlst_outdata$ECC_10_80_10 > outlier_temp)] <- 3
mlst_outdata$balanced_sig[which(mlst_outdata$ECC_50_30_20 > outlier_balanced)] <- 5
# Plot the source and temporal ECC with the identified "outliers" as orange and green shapes instead of grey:
p_mlst <- ggplot(mlst_outdata, aes(x = MLST_ST, y = ECC_80_10_10, fill = as.character(source_sig))) + plot_theme() +
geom_point(size = 3, shape = 21) + theme(axis.text.x  = element_text(angle=90, vjust = 0.5)) +
geom_point(size = 3, shape = 24, aes(x = MLST_ST, y = ECC_10_80_10, fill = as.character(temp_sig))) +
geom_point(size = 3, shape = 23, aes(x = MLST_ST, y = ECC_50_30_20, fill = as.character(balanced_sig))) +
labs(y = "", title = '', x = 'MLST ST') + theme(legend.position = "none") +
scale_y_continuous(limit = c(0, 1)) + scale_fill_manual(values = c("0" = "grey50","1" = "#d95f02", "2" = "grey90", "3" = "#4dac26", "4" = "grey95", "5" = "#010101"))
# Combine both plots into a single Figure:
mlst_multiplot <- grid.arrange(box_mlst, p_mlst, ncol = 2, widths = c(5, 15))
# load our table
epi_subtype_match <- suppressMessages(read_tsv("can654.epi(50_30_20).subtype.matching.txt"))
# save the non redundant data (i.e. no "same-same" isolate name matches)
mydata <- as.data.frame(epi_subtype_match)
mydata_nr <- mydata[-which(mydata[,1]==mydata[,2]),]
# calculate the average ∆E for isolates in the same clustersfor each method
paste0("Mean (1-∆E) for pairs of isolates in the same CGF Clusters = ",
round(1 - mean(mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2), "value"]), 4),
", MLST = ",
round(1 - mean(mydata_nr[which(mydata_nr$MLST1 == mydata_nr$MLST2), "value"]), 4),
", CC = ",
round(1 - mean(mydata_nr[which(mydata_nr$CC1 == mydata_nr$CC2), "value"]), 4)
)
# for isolates NOT in the same clusters for each method
paste0("Mean (1-∆E) for pairs of isolates NOT in the same CGF Clusters = ",
round(1 - mean(mydata_nr[which(mydata_nr$CGF1 != mydata_nr$CGF2), "value"]), 4),
", MLST = ",
round(1 - mean(mydata_nr[which(mydata_nr$MLST1 != mydata_nr$MLST2), "value"]), 4),
", CC = ",
round(1 - mean(mydata_nr[which(mydata_nr$CC1 != mydata_nr$CC2), "value"]), 4)
)
# and finally for all isolates regardless of clustering
paste0("Average PW (1-∆E) for the entire dataset = ",
round(1 - mean(mydata_nr[, "value"]), 4)
)
# Avg ∆E for each cluster:
n <- 0
CC_Cluster.data <- list()
for(i in unique(mydata_nr$CC1)){
n <- n+1
x <- mydata_nr$value[(mydata_nr$CC1 == i) & (mydata_nr$CC2 == i)]
CC_Cluster.data$ClusterName[n] <- paste0("CC-",i)
CC_Cluster.data$MeanESym[n] <- 1-mean(x)
CC_Cluster.data$Length[n] <- length(x)
}
n <- 0
MLST_Cluster.data <- list()
for(i in unique(mydata_nr$MLST1)){
n <- n+1
x <- mydata_nr$value[(mydata_nr$MLST1 == i) & (mydata_nr$MLST2 == i)]
MLST_Cluster.data$ClusterName[n] <- paste0("ST-",i)
MLST_Cluster.data$MeanESym[n] <- 1-mean(x)
MLST_Cluster.data$Length[n] <- length(x)
}
n <- 0
CGF_Cluster.data <- list()
for(i in unique(mydata_nr$CGF1)){
n <- n+1
x <- mydata_nr$value[(mydata_nr$CGF1 == i) & (mydata_nr$CGF2 == i)]
CGF_Cluster.data$ClusterName[n] <- paste0("CGF-",i)
CGF_Cluster.data$MeanESym[n] <- 1-mean(x)
CGF_Cluster.data$Length[n] <- length(x)
}
usePackage<-function(p){
# load a package if installed, else load after installation.
# Args:
#   p: package name in quotes
if (!is.element(p, installed.packages()[,1])){
print(paste('Package:',p,'Not found, Installing Now...'))
install.packages(p, dep = TRUE, repos = "http://cran.us.r-project.org")}
suppressMessages(require(p, character.only = TRUE))
print(paste0(p, " loaded."))
}
usePackage("xlsx")
usePackage("reshape2")
usePackage("plyr")
usePackage("grid")
usePackage("gridExtra")
usePackage("ggplot2")
usePackage("RColorBrewer")
usePackage("gplots")
usePackage("readr")
epi_subtype_match <- suppressMessages(read_tsv("can654.epi(50_30_20).subtype.matching.txt"))
mydata <- as.data.frame(epi_subtype_match)
mydata_nr <- mydata[-which(mydata[,1]==mydata[,2]),]
paste0("Mean (1-∆E) for pairs of isolates in the same CGF Clusters = ",
round(1 - mean(mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2), "value"]), 4),
", MLST = ",
round(1 - mean(mydata_nr[which(mydata_nr$MLST1 == mydata_nr$MLST2), "value"]), 4),
", CC = ",
round(1 - mean(mydata_nr[which(mydata_nr$CC1 == mydata_nr$CC2), "value"]), 4)
)
mydata_nr
mydata_nr[1:10]
mydata_nr[1:10,]
paste0("Mean (1-∆E) for pairs of isolates in the same CGF Clusters = ",
round(1 - mean(mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2), "value"]), 4),
", MLST = ",
round(1 - mean(mydata_nr[which(mydata_nr$MLST1 == mydata_nr$MLST2), "value"]), 4),
", CC = ",
round(1 - mean(mydata_nr[which(mydata_nr$CC1 == mydata_nr$CC2), "value"]), 4)
)
length(mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2))
length(mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2)
length(mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2))
length(mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2))
length(mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2), "value"])
7666/654
mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2), "value"]
mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2),]
cgf_in <- mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2),]
mlst_in <- mydata_nr[which(mydata_nr$MLST1 == mydata_nr$MLST2),]
cc_in <- mydata_nr[which(mydata_nr$CC1 == mydata_nr$CC2),]
# calculate the average ∆E for isolates in the same clustersfor each method
paste0("Mean (1-∆E) for pairs of isolates in the same CGF Clusters = ",
round(1 - mean(mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2), "value"]), 4),
", MLST = ",
round(1 - mean(mydata_nr[which(mydata_nr$MLST1 == mydata_nr$MLST2), "value"]), 4),
", CC = ",
round(1 - mean(mydata_nr[which(mydata_nr$CC1 == mydata_nr$CC2), "value"]), 4)
)
# for isolates NOT in the same clusters for each method
paste0("Mean (1-∆E) for pairs of isolates NOT in the same CGF Clusters = ",
round(1 - mean(mydata_nr[which(mydata_nr$CGF1 != mydata_nr$CGF2), "value"]), 4),
", MLST = ",
round(1 - mean(mydata_nr[which(mydata_nr$MLST1 != mydata_nr$MLST2), "value"]), 4),
", CC = ",
round(1 - mean(mydata_nr[which(mydata_nr$CC1 != mydata_nr$CC2), "value"]), 4)
paste0("Mean (1-∆E) for pairs of isolates in the same CGF Clusters = ",
round(1 - mean(mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2), "value"]), 4),
", MLST = ",
round(1 - mean(mydata_nr[which(mydata_nr$MLST1 == mydata_nr$MLST2), "value"]), 4),
", CC = ",
round(1 - mean(mydata_nr[which(mydata_nr$CC1 == mydata_nr$CC2), "value"]), 4)
)
# for isolates NOT in the same clusters for each method
paste0("Mean (1-∆E) for pairs of isolates NOT in the same CGF Clusters = ",
round(1 - mean(mydata_nr[which(mydata_nr$CGF1 != mydata_nr$CGF2), "value"]), 4),
", MLST = ",
round(1 - mean(mydata_nr[which(mydata_nr$MLST1 != mydata_nr$MLST2), "value"]), 4),
", CC = ",
round(1 - mean(mydata_nr[which(mydata_nr$CC1 != mydata_nr$CC2), "value"]), 4)
)
paste0("Mean (1-∆E) for pairs of isolates in the same CGF Clusters = ",
round(1 - mean(mydata_nr[which(mydata_nr$CGF1 == mydata_nr$CGF2), "value"]), 4),
", MLST = ",
round(1 - mean(mydata_nr[which(mydata_nr$MLST1 == mydata_nr$MLST2), "value"]), 4),
", CC = ",
round(1 - mean(mydata_nr[which(mydata_nr$CC1 == mydata_nr$CC2), "value"]), 4)
)
paste0("Mean (1-∆E) for pairs of isolates NOT in the same CGF Clusters = ",
round(1 - mean(mydata_nr[which(mydata_nr$CGF1 != mydata_nr$CGF2), "value"]), 4),
", MLST = ",
round(1 - mean(mydata_nr[which(mydata_nr$MLST1 != mydata_nr$MLST2), "value"]), 4),
", CC = ",
round(1 - mean(mydata_nr[which(mydata_nr$CC1 != mydata_nr$CC2), "value"]), 4)
)
cgf_notin <- mydata_nr[which(mydata_nr$CGF1 != mydata_nr$CGF2),]
mlst_notin <- mydata_nr[which(mydata_nr$MLST1 != mydata_nr$MLST2),]
cc_notin <- mydata_nr[which(mydata_nr$CC1 != mydata_nr$CC2),]
cc_in[1:100,]
cc_in[,10] <- "cc.in"
cc_notin[,10] <- "cc.notin"
cgf_in[,10] <- "cgf_in"
cgf_notin[,10] <- "cgf_notin"
mlst_in[,10] <- "mlst_in"
mlst_notin[,10] <- "mlst_notin"
for_aov<- do.call("rbind", list(cc_in, cc_notin, cgf_in, cgf_notin, mlst_in, mlst_notin))
head(for_aov)
fit <- aov(value ~ V10, data = for_aov)
summary(fit)
TukeyHSD(fit)
cc_in <- mydata_nr[which(mydata_nr$CC1 == mydata_nr$CC2),]
summary(fit)
TukeyHSD(fit)
plot(fit)
